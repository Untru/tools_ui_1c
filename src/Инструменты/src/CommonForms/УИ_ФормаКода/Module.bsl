
 
#Область ОписаниеПеременных

&НаКлиенте
Перем УИ_РедакторКодаКлиентскиеДанные Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не Параметры.Свойство("Код") Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Код = Параметры.Код;
	
	Если Параметры.Свойство("ИмяМетодаДляПереходаКОпределению") Тогда
		ИмяМетодаДляПереходаКОпределению = Параметры.ИмяМетодаДляПереходаКОпределению;
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяМодуля") Тогда
		Заголовок = Параметры.ИмяМодуля;
	КонецЕсли;
	
	УИ_РедакторКодаСервер.ФормаПриСозданииНаСервере(ЭтотОбъект);
	УИ_РедакторКодаСервер.СоздатьЭлементыРедактораКода(ЭтотОбъект, "Код", Элементы.ПолеКода);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УИ_РедакторКодаКлиент.ФормаПриОткрытии(ЭтотОбъект, Неопределено);
КонецПроцедуры



#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы //<ИмяТаблицыФормы>

// Код процедур и функций

#КонецОбласти

#Область ОбработчикиКомандФормы


&НаКлиенте
Процедура СкопироватьВБуфер(Команда)
	УИ_БуферОбменаКлиент.НачатьКопированиеСтрокиВБуфер(УИ_РедакторКодаКлиент.ТекстКодаРедактора(ЭтотОбъект, "Код"),
													   Новый ОписаниеОповещения("СкопироватьВБуферЗавершение",
		ЭтотОбъект));
КонецПроцедуры


&НаКлиенте
Процедура Поделиться(Команда)
	ТекстКода = УИ_РедакторКодаКлиент.ТекстКодаРедактора(ЭтотОбъект, "Код");
	УИ_РедакторКодаКлиент.ПоделитьсяКодом(ТекстКода, Ложь, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Скопировать в буфер завершение.
// 
// Параметры:
//  Результат - Булево-Результат
//  ДополнительныеПараметры - Неопределено- Дополнительные параметры
&НаКлиенте
Процедура СкопироватьВБуферЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Истина Тогда
		Заголовок = "Код скопирован в буфер обмена";
	Иначе
		Заголовок = "Не удалось скопировать в буфер обмена";
	КонецЕсли;
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеРедактораДокументСформирован(Элемент)
	УИ_РедакторКодаКлиент.ПолеРедактораHTMLДокументСформирован(ЭтотОбъект, Элемент);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПолеРедактораПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	УИ_РедакторКодаКлиент.ПолеРедактораHTMLПриНажатии(ЭтотОбъект, Элемент, ДанныеСобытия, СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_РедакторКодаОтложеннаяИнициализацияРедакторов()
	УИ_РедакторКодаКлиент.РедакторКодаОтложеннаяИнициализацияРедакторов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_РедакторКодаЗавершениеИнициализацииРедактора(ИдентификаторРедактора) Экспорт
	Если ИдентификаторРедактора<> "Код" Тогда
		Возврат;
	КонецЕсли;
	УИ_РедакторКодаКлиент.УстановитьТекстРедактора(ЭтотОбъект, "Код", Код);
	УИ_РедакторКодаКлиент.УстановитьРежимТолькоПросмотрРедактора(ЭтотОбъект, "Код", Истина);
	
	Если ЗначениеЗаполнено(ИмяМетодаДляПереходаКОпределению) Тогда
		УИ_РедакторКодаКлиент.ПерейтиКОпределениюМетодаРедактора(ЭтотОбъект, "Код", ИмяМетодаДляПереходаКОпределению);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедакторКодаОтложеннаяОбработкаСобытийРедактора() Экспорт
	УИ_РедакторКодаКлиент.ОтложеннаяОбработкаСобытийРедактора(ЭтотОбъект);
КонецПроцедуры





#КонецОбласти
